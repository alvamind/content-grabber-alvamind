#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const readline = __importStar(require("readline"));
const chalk_1 = __importDefault(require("chalk"));
const fs = __importStar(require("fs"));
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});
// Get command line arguments
const [, , versionArg, commitMessageArg] = process.argv;
function askQuestion(query) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve) => {
            rl.question(query, resolve);
        });
    });
}
function checkGitStatus() {
    try {
        const status = (0, child_process_1.execSync)('git status --porcelain').toString();
        return status.length === 0;
    }
    catch (error) {
        return false;
    }
}
function getCurrentBranch() {
    return (0, child_process_1.execSync)('git rev-parse --abbrev-ref HEAD').toString().trim();
}
function validatePackageJson() {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    const requiredFields = ['name', 'version', 'description', 'main', 'types'];
    for (const field of requiredFields) {
        if (!packageJson[field]) {
            throw new Error(`Missing required field in package.json: ${field}`);
        }
    }
}
function selectVersionType() {
    return __awaiter(this, void 0, void 0, function* () {
        // If version type is provided via command line, use it
        if (versionArg && ['patch', 'minor', 'major'].includes(versionArg)) {
            return versionArg;
        }
        console.log(chalk_1.default.cyan('\nSelect version increment type:'));
        console.log(chalk_1.default.gray('1. patch (1.0.0 -> 1.0.1)'));
        console.log(chalk_1.default.gray('2. minor (1.0.0 -> 1.1.0)'));
        console.log(chalk_1.default.gray('3. major (1.0.0 -> 2.0.0)'));
        const answer = yield askQuestion('Enter your choice (1-3): ');
        const versionMap = {
            '1': 'patch',
            '2': 'minor',
            '3': 'major',
        };
        return versionMap[answer] || 'patch';
    });
}
function getCommitMessage() {
    return __awaiter(this, void 0, void 0, function* () {
        // If commit message is provided via command line, use it
        if (commitMessageArg) {
            return commitMessageArg;
        }
        const message = yield askQuestion(chalk_1.default.cyan('Enter commit message: '));
        if (!message.trim()) {
            throw new Error('Commit message is required');
        }
        return message;
    });
}
function publishPackage() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            console.log(chalk_1.default.cyan('\nüîç Running pre-publish checks...\n'));
            // Validate package.json
            console.log(chalk_1.default.cyan('üìã Validating package.json...'));
            validatePackageJson();
            console.log(chalk_1.default.green('‚úÖ package.json is valid'));
            // Check current branch
            const currentBranch = getCurrentBranch();
            if (currentBranch !== 'main' && currentBranch !== 'master') {
                console.log(chalk_1.default.yellow(`‚ö†Ô∏è  You're on branch '${currentBranch}'.`));
            }
            // Check for uncommitted changes
            if (!checkGitStatus()) {
                console.log(chalk_1.default.yellow('‚ö†Ô∏è  You have uncommitted changes'));
                const commitMessage = yield getCommitMessage();
                (0, child_process_1.execSync)(`bun commit "${commitMessage}"`, { stdio: 'inherit' });
            }
            // Clean and build
            console.log(chalk_1.default.cyan('\nüßπ Cleaning project...'));
            (0, child_process_1.execSync)('bun clean', { stdio: 'inherit' });
            console.log(chalk_1.default.cyan('\nüì¶ Installing dependencies...'));
            (0, child_process_1.execSync)('bun install', { stdio: 'inherit' });
            console.log(chalk_1.default.cyan('\nüî® Building project...'));
            (0, child_process_1.execSync)('bun run build', { stdio: 'inherit' });
            // Run tests if they exist
            try {
                console.log(chalk_1.default.cyan('\nüß™ Running tests...'));
                (0, child_process_1.execSync)('bun test', { stdio: 'inherit' });
                console.log(chalk_1.default.green('‚úÖ Tests passed'));
            }
            catch (error) {
                console.log(chalk_1.default.yellow('‚ö†Ô∏è  No tests found or tests failed'));
            }
            // Version increment
            const versionType = yield selectVersionType();
            console.log(chalk_1.default.cyan(`\nüìù Incrementing ${versionType} version...`));
            (0, child_process_1.execSync)(`npm version ${versionType} --no-git-tag-version`, { stdio: 'inherit' });
            // Publish to npm
            console.log(chalk_1.default.cyan('\nüöÄ Publishing to npm...'));
            (0, child_process_1.execSync)('npm publish', { stdio: 'inherit' });
            // Create and push git tag
            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            const tagName = `v${packageJson.version}`;
            (0, child_process_1.execSync)(`git tag ${tagName}`, { stdio: 'inherit' });
            (0, child_process_1.execSync)('git push && git push --tags', { stdio: 'inherit' });
            console.log(chalk_1.default.green('\n‚ú® Package successfully published to npm!'));
            console.log(chalk_1.default.gray(`Version: ${packageJson.version}`));
            console.log(chalk_1.default.gray(`Tag: ${tagName}`));
        }
        catch (error) {
            console.error(chalk_1.default.red('\n‚ùå Error during publish process:'), error);
            process.exit(1);
        }
        finally {
            rl.close();
        }
    });
}
publishPackage();
