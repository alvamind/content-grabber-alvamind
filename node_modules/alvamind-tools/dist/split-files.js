#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// split-files.ts
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const chalk_1 = __importDefault(require("chalk"));
function splitFile(singleFilePath, markers, outputDirPath) {
    if (!fs.existsSync(singleFilePath)) {
        console.error(chalk_1.default.red(`Error: File not found: ${singleFilePath}`));
        process.exit(1);
    }
    const fileContent = fs.readFileSync(singleFilePath, 'utf-8');
    const fileSections = [];
    // Find all file markers and their positions
    markers.forEach((marker) => {
        const fileRegex = new RegExp(`\\/\\/ ${marker}(.*?\\.ts)`, 'g');
        let match;
        while ((match = fileRegex.exec(fileContent)) !== null) {
            const filePath = match[1].trim();
            const start = match.index;
            fileSections.push({
                filePath,
                start,
                end: start, // Will be updated later
                content: '',
                created: false,
            });
        }
    });
    // Sort sections by their start position
    fileSections.sort((a, b) => a.start - b.start);
    // Set the end position for each section
    for (let i = 0; i < fileSections.length; i++) {
        const currentSection = fileSections[i];
        const nextSection = fileSections[i + 1];
        // If there's a next section, set end to the start of next section
        // Otherwise, set it to the end of file
        currentSection.end = nextSection ? nextSection.start : fileContent.length;
        // Extract content from after the marker line to the start of next section
        const markerLineEnd = fileContent.indexOf('\n', currentSection.start) + 1;
        currentSection.content = fileContent.substring(markerLineEnd, currentSection.end).trim();
    }
    // Create files for each section
    fileSections.forEach((section) => {
        const { filePath, content } = section;
        const fileDir = outputDirPath
            ? path.resolve(outputDirPath, path.dirname(filePath))
            : path.resolve(path.dirname(filePath));
        const fileName = path.basename(filePath);
        const fullFilePath = path.join(fileDir, fileName);
        // Create directory if it doesn't exist
        if (!fs.existsSync(fileDir)) {
            fs.mkdirSync(fileDir, { recursive: true });
        }
        // Write file content
        fs.writeFileSync(fullFilePath, content);
        console.log(chalk_1.default.green(`Created: ${chalk_1.default.bold(fullFilePath)}`));
    });
    if (fileSections.length === 0 && fileContent.length > 0) {
        console.log(chalk_1.default.yellow('No marker path found in the file.'));
    }
    if (fileSections.length > 0) {
        console.log(chalk_1.default.cyan('\nFiles splitted successfully! âœ¨\n'));
        const openCommand = process.platform === 'darwin' ? 'open' : process.platform === 'win32' ? 'start' : 'xdg-open';
        console.log(chalk_1.default.blue(`You can open the files with ${chalk_1.default.bold('CTRL+Click')}`));
    }
}
const args = process.argv.slice(2);
if (args.length === 0) {
    console.error(chalk_1.default.red('Usage: split source=<filePath> markers=<marker1,marker2,...> [outputDir=<path>]'));
    console.error(chalk_1.default.yellow('Example: split source=all-in-one.ts markers=src/,custom/ outputDir=./output'));
    process.exit(1);
}
// Parse named arguments
const parsedArgs = {};
args.forEach((arg) => {
    const [key, value] = arg.split('=');
    if (key && value) {
        parsedArgs[key] = value;
    }
});
if (!parsedArgs.source || !parsedArgs.markers) {
    console.error(chalk_1.default.red('Error: source and markers parameters are required'));
    console.error(chalk_1.default.yellow('Example: split source=all-in-one.ts markers=src/,custom/ outputDir=./output'));
    process.exit(1);
}
const singleFilePath = parsedArgs.source;
const markers = parsedArgs.markers.split(',');
const outputDirPath = parsedArgs.outputDir;
splitFile(singleFilePath, markers, outputDirPath);
